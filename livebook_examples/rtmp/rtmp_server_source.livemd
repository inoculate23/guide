# RTMP Server Source

```elixir
File.cd(__DIR__)
Logger.configure(level: :error)

Mix.install([
  {:membrane_core, "~>0.11.2"},
  {:membrane_realtimer_plugin, "~>0.6.1"},
  {:membrane_hackney_plugin, "~>0.9.0"},
  {:membrane_rtmp_plugin, "~>0.11.0"}
])
```

## Section

```elixir
defmodule RTMPSource.Pipeline do
  use Membrane.Pipeline

  @samples_url "https://raw.githubusercontent.com/membraneframework/static/gh-pages/samples/big-buck-bunny/"
  @video_url @samples_url <> "bun33s_480x270.h264"
  @audio_url @samples_url <> "bun33s.aac"
  @impl true
  def handle_init(_ctx, destination: destination) do
    video_source =
      child(:video_source, %Membrane.Hackney.Source{
        location: @video_url,
        hackney_opts: [follow_redirect: true]
      })
      |> child(:video_parser, %Membrane.H264.FFmpeg.Parser{
        framerate: {25, 1},
        alignment: :au,
        attach_nalus?: true,
        skip_until_keyframe?: true
      })
      |> child(:video_realtimer, Membrane.Realtimer)
      |> child(:video_payloader, Membrane.MP4.Payloader.H264)

    audio_source =
      child(:audio_source, %Membrane.Hackney.Source{
        location: @audio_url,
        hackney_opts: [follow_redirect: true]
      })
      |> child(:audio_parser, %Membrane.AAC.Parser{
        in_encapsulation: :ADTS,
        out_encapsulation: :ADTS
      })
      |> child(:audio_realtimer, Membrane.Realtimer)

    rtmp_sink =
      child(:rtmp_sink, %Membrane.RTMP.Sink{
        rtmp_url: destination,
        max_attempts: :infinity
      })

    structure = [
      video_source
      |> via_in(:video)
      |> get_child(:rtmp_sink),
      audio_source
      |> via_in(:audio)
      |> get_child(:rtmp_sink),
      rtmp_sink
    ]

    {[spec: structure, playback: :playing], %{streams_to_end: 2}}
  end

  # The rest of the example module is only used for self-termination of the pipeline after processing finishes
  def await_termination(pipeline) do
    monitor_ref = Process.monitor(pipeline)

    receive do
      {:DOWN, ^monitor_ref, :process, _pid, _reason} ->
        :ok
    end
  end

  @impl true
  def handle_element_end_of_stream(:rtmp_sink, _pad, _ctx, %{streams_to_end: 1} = state) do
    Membrane.Pipeline.terminate(self())
    {[], %{state | streams_to_end: 0}}
  end

  @impl true
  def handle_element_end_of_stream(:rtmp_sink, _pad, _ctx, state) do
    {[], %{state | streams_to_end: 1}}
  end

  @impl true
  def handle_element_end_of_stream(_child, _pad, _ctx, state) do
    {[], state}
  end
end

:ok
```

```elixir
port = 1942
destination = System.get_env("RTMP_URL", "rtmp://localhost:#{port}")

{:ok, _supervisor, pipeline} = RTMPSource.Pipeline.start(destination: destination)
RTMPSource.Pipeline.await_termination(pipeline)
```
